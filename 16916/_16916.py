# -*- coding: utf-8 -*-
"""# 16916

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n042IGa09jQkX0SKPOqwktgsvQkwJIhi
"""

# 16916 부분 문자열
S = input()
P = input()

# 실패함수
def makeTable(pattern):
    len_p = len(pattern)
    failure_table = [0 for _ in range(len_p)]
    j = 0
    for i in range(1, len_p):
        while (j > 0 and pattern[j] != pattern[i]):
            j = failure_table[j-1]
        
        if (pattern[j] == pattern[i]):
            j += 1
            failure_table[i] = j
    
    return failure_table

def KMP(S, P):
    failure_table = makeTable(P)
    len_S = len(S)
    len_P = len(P)

    j = 0
    for i in range(len_S):
        while (j>0 and S[i] != P[j]):
            j = failure_table[j-1]

        if (S[i]==P[j]): # 문자열에서 가리키는 글자, 패턴에서 가리키는 글자 같음
            if (j == len_P -1): # 근데 패턴 마지막 글자임
                # j = failure_table[j] # 다음 또 일치하는거 찾는 경우
                return 1 # 그럼 부분 문자열
            else:
                j += 1    
    
    return 0 # 다 돌아도 안끝났으면 없는 것.

print(KMP(S,P))